install.packages("EcoHydRology") # Only needs to be done once on your computer
installed.packages("xml")
installed.packages("EcoHydRology")
installed.packages("acid")
install.packages("topmodel")
load("~/github/Coastal_Engineering/feb27_100mm.dat")
?lumped_VSA_model
??lumped_VSA_model
setwd("~/github/Coastal_Engineering")
library(readr)
Lab4_W1 <- read_csv("~/github/Coastal_Engineering/Lab 4/Lab4_W1.csv")
View(Lab4_W1)
plot(Lab4_W1$`time (s)`,Lab4_W1$`Force (newtons)`)
View(Lab4_W1)
Lab4_W1$`time (s)` = Lab4_W1$`time (s)` - Lab4_W1$`time (s)`[1]
plot(Lab4_W1$`time (s)`,Lab4_W1$`Force (newtons)`)
plot(Lab4_W1$`time (s)`,Lab4_W1$`Force (newtons)`, ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`[0:20],Lab4_W1$`Force (newtons)`[0:20], ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`[0:50],Lab4_W1$`Force (newtons)`[0:50], ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`,Lab4_W1$`Force (newtons)`, ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`[0:50],Lab4_W1$`Force (newtons)`[0:50], ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`[0:500],Lab4_W1$`Force (newtons)`[0:500], ylab = "Force (N)", xlab = "Time (s)")
plot(Lab4_W1$`time (s)`[0:1000],Lab4_W1$`Force (newtons)`[0:1000], ylab = "Force (N)", xlab = "Time (s)")
W1_k = 16.1317
W2_k = 16.1317
W3_k = 5.17913
W4_k = 5.17913
W1_lmbda = 2*pi/W1_k
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
W1_k = -16.1317
W1_lmbda = 2*pi/W1_k
W1_k = 16.1317
W1_k = 2.3209
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508
W1_Dl = W1_lmbda/D
W2_Dl = W2_lmbda/D
W3_Dl = W3_lmbda/D
W4_Dl = W4_lmbda/D
D = 0.0508
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
T12 = 2
T34 = 1
# Lab 4
# Read in data for Wave 1
Lab4_W1 <- read_csv("~/github/Coastal_Engineering/Lab 4/Lab4_W1.csv")
# Reset the time series so it starts at 0 seconds
Lab4_W1$`time (s)` = Lab4_W1$`time (s)` - Lab4_W1$`time (s)`[1]
### 1. Plot the Wave Case 1 condition of force vs. time
plot(Lab4_W1$`time (s)`,Lab4_W1$`Force (newtons)`, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
plot(Lab4_W1$`time (s)`[0:1000],Lab4_W1$`Force (newtons)`[0:1000], ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
### 2. Calculate D/lambda for each wave case and compare with slender body assumption
# Calculate lambda using the dispersion relationship
# sigma^2 = gktanh(kh)
# T = 1/freq
h_cm = 20
W1_stroke_mm = 30
W1_freq_Hz = 0.5
T12 = 2
T34 = 1
# Use root-solver function to find the k values for the different waves
W1_k = 2.3209
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 1*pi/T12
W2_sig = 1*pi/T12
W3_sig = 1*pi/T34
W4_sig = 1*pi/T34
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
# Find u using u = a*k*Cp
W1_u = W1_a * W1_k * W1_Cp
W2_u = W2_a * W2_k * W2_Cp
W3_u = W3_a * W3_k * W3_Cp
W4_u = W4_a * W4_k * W4_Cp
W1_a = 0.013
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
W1_u = W1_a * W1_k * W1_Cp
W2_u = W2_a * W2_k * W2_Cp
W3_u = W3_a * W3_k * W3_Cp
W4_u = W4_a * W4_k * W4_Cp
v = 1.003*10^-6
v = 1.003*10^-6
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
which(diff(sign(diff(Lab4_W1$`Force (newtons)`)))==-2)+1
W1_index = which(diff(sign(diff(Lab4_W1$`Force (newtons)`)))==-2)+1
for (i in length(W1_index))
{
W1_local[i] = Lab4_W1$`Force (newtons)`(W1_index[i])
}
W1_index = which(diff(sign(diff(Lab4_W1$`Force (newtons)`)))==-2)+1
for (i in length(W1_index))
{
W1_local[i] = Lab4_W1$`Force (newtons)`[(W1_index[i]])
}
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
W1_index = which(diff(sign(diff(Lab4_W1$`Force (newtons)`)))==-2)+1
for (i in length(W1_index))
{
W1_local[i] = Lab4_W1$`Force (newtons)`[W1_index[i]]
}
W1_local = zeros(length(W1_index))
W1_local = zero(length(W1_index))
W1_local = zeros(length(W1_index),1)
W1_local = zeros(100,1)
W1_local = integer(length(W1_index))
for (i in length(W1_index))
{
W1_local[i] = Lab4_W1$`Force (newtons)`[W1_index[i]]
}
